Javascript
-------------
->It  is a programming language that allows us to implement complex feaute of the web pages.
->HTML-it is a markup language that we use to structure and giving meaning to our web content.
->CSS-it is a language of style rules that used to apply styling to our Html Content.
->Javascript-It is scripting language that enables you to create dynamically updating content.
->Syntax Parser:it is a program that reads your code and findout your code is valid or not.
->Lexical Envirenment:Where something sits physically in the code you write.
ex:f1unction(){
    anklmdjdj1
    kmondkmld1
    cedeklmnd
}
->Execution Context:
  A wrapper to help manage the code that is running.
  lexical 1
  lexical 2
  lexical 3
  for e.g There are lots of lexical Envirenment which one is currently running is managed by Execution context.
  Name/Value pairs
  -----------------
  A name which maps to a unique value(name:'santanu')
  ->Object:
   A collectin of these value pare is called object.
   ->what is global Envirenment and Global object?
   Ans:When ever code is running inside Javascript it runs inside an Execution context..
   ->Javascript Execution engine creating two things for us.
   (1)Global Object
   (2)This
   ->why we are using console.log?
   ans:it is the one which will help you to write to your output to your console window.
  Hoisting:
  -----------
  When we declair variable and function in Javascript the exection engine sets up a memory space for variable and function .
  if it a variable i will assign default value is called undefined and if it is a function i will copy the entire function.
  and keep in the memory.
  Ex:b();
  console.log(a)
  var a="hello world"
  function b(){
      console.log("called b")
  }
  output:called b
         undefined

undefined:
it is special value in javascript.
warning:Never ever declair a variable undefined,because it is different to find
value is 'undefined'because we set it or javascript exection engine set it up.

Difference between (==,===):
------------------------------
->==:Check for value(a=10)
->===:check for value and type
ex:var a="10"
   console.log(a===10)
   output:false
->==if a is 10 or not checking if a is a number or string
=>===if a is 10 and a is an integer
   Types:
-----------
Dynamic Typing:
----------------
You don't tell the engine what type of data a variable holds,it figures out while code is running.
based on the data it will try to decide type.
ex: var a="santanu"
        a=1;
        a={}
        a=[]
        a=function(){}
console.log(typeof a)

Strict Typing:
--------------
c# or java follows strict typing.

Prmitive Types:
---------------
A types of data that represent a single value is called Prmitive data type.
1.undefined-This represent lack of existance(we should never use This)
2.null-This represent lack of existance(We can set a variable to This)
3.Boolean-true or false
4.integer/floating type(decimal)
5.string-a sequence of character
6.Symbol-used in ES6
Function:
----------
it is a block of code wrapped around flower brackets and invocated later.
Ex:function functionname(){

}
Types of functions:
---------------------
(1)Regular Function
(2)Anonymous Function
(3)Immediately Invoked function(IIFS)

About Regular Function:
--------------------------
Ex:function sayHello(){
    console.log('santanu')
}
sayHello();

function getFullName(firstName,lastName){
    return firstName+''+lastName
}
var FullName=getFullName('Santanu','Paikaray');
console.log(fullName)

function test(){
    return undefined
    return null
    return 1
    return "santanu"
    return true
    return {}
    return []
    return function(){}
}
var output=test();
console.log(output)
Anonymous Function:
----------------------
Function without any name is called Anonymous function.
ex:
  var sample = function (){

  }
var output=sample()
console.log(output)
First Class Function:
---------------------
(1)Can be Invoked
(2)assign to a variable
(3)Passed as parameter to another variable

var timeoutfunction=function(){
    console.log('This will be printed after three seconds')
}
setTimeout(timeoutfunction,6000)
->What is callback function?
Ans:Function passing to the parameter to the parameter to another function
is called callback.
Immediately Invoke Function:
-----------------------------
var sample=(function (){
    console.log("This is sample function")
    return 1

})()
console.log(sample)
->if you are wrapping your function around parenthesis trying to Invoke it Immediately that is called Immediately Invoke function.
->it is just similar to anonymous function but the Difference is it is wrapped around parenthesis.
Objects:
----------
->An Object is a collectin of name value pairs.
->If you have two flower brackets() in javascript that means you are deals with object.
->How to create an object?
First i will create a variable
var person=new object();
console.log(person)
How to pass property to my object.
person["firstName"]="Santanu"
person["lastName"]="Paikaray"

Using Dot Notation:
------------------------
By using dot Notation we can represent our object also.
console.log(person.firstName)
console.log(person.lastName)
Object-literial:-
------------------
var person={};
console.log(person)
->Having two flower brackets is object literial Syntax.
->When your function inside the object that become method.
ex:var person={
    id:1
    firstName:"santanu"
    lastName:"Paikaray"
    getDetails:function(){

    }
}
console.log(person)
->primitive types inside an object are called properties.

Object.create() method creates a new object using an existing object or null
as the protoype for newly created object

var person = Object.create(null)//create an empty/null object
var person = object.create({})//create a normal function

JSON:
------
->it is a javascript object Notation.
->Inspired by the object literral Notation.
->Earler how to pass the data to our server is 
<data>
<firstName>Santanu</firstName>
<lastName>Paikaray</lastName>
</data>
->Now day we are pasing data to our server is ðŸ¥¿
JSON:
-----------
common usage of json is to exchange data to/from webserver.
{
    "firstName":"Santanu"
    "lastName":"Paikaray"
}
Object:
----------
{
    firstName:"Santanu"
    lastName:"Paikaray"
}
->Anything which is JSON valid is object literial.
JSON.stringify-converts a javascript value into
seriazlied string.

Difference between stringify and parser:
-------------------------------------------
stringify:it will serialize your object and convert into string.
Parser:it will deserialze your object and convert into json object.





